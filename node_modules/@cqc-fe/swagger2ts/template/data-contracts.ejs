<%
const { modelTypes, route, utils, config } = it;
const { formatDescription, require, _, Ts, pascalCase } = utils;
const apiClassName = pascalCase(route.moduleName);
const routes = route.routes;
const dataContracts = _.map(modelTypes, "name");


const dataContractTemplates = {
  enum: (contract) => {
    return `enum ${contract.name} {\r\n${contract.content} \r\n }`;
  },
  interface: (contract) => {
    return `interface ${contract.name} {\r\n${contract.content}}`;
  },
  type: (contract) => {
    return `type ${contract.name} = ${contract.content}`;
  },
}
%>

<% if (config.internalTemplateOptions.addUtilRequiredKeysType) { %>
type <%~ config.Ts.CodeGenKeyword.UtilRequiredKeys %><T, K extends keyof T> = Omit<T, K> & Required<Pick<T, K>>
<% } %>

<% modelTypes.forEach((contract) => { %>
  <%~ includeFile('./data-contract-jsdoc.ejs', { ...it, data: { ...contract, ...contract.typeData } }) %>

  <% if (contract.moduleName.find(item => pascalCase(item) === apiClassName)) { %>
    export <%~ (dataContractTemplates[contract.typeIdentifier] || dataContractTemplates.type)(contract) %>;
    <% } %>
<% }) %>
