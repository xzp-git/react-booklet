<%
const { apiConfig, generateResponses, config } = it;
%>

import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse, ResponseType, HeadersDefaults } from "axios";

import { ApiConfig, ContentType, FullRequestParams, BusinessCode,
  codeMessage } from "./http-client-types";
<% if(config.requireSelfAxios) { %>
    import selfAxios from "<%~ config.requireSelfAxios %>"
<%}%>

export type CustomAxiosRequestConfig = AxiosRequestConfig & { loading?: boolean };

<% if(!config.requireSelfAxios) { %>

// 记录UI框架中loading元素
let loadingInstance: any = null;
let requestNum = 0;

// 当正在请求接口时，添加loading，当有多个请求增加requestNum，当requestNum === 1的时候一直显示loading
const addLoading = () => {
  requestNum++;
  if (requestNum == 1) {
    // 此处可开始UI框架中的loading
    // loadingInstance = ...
  }
};

// 关闭loading，当requestNum === 0的时候关闭loading
const cancelLoading = () => {
  requestNum--;
  if (requestNum === 0) loadingInstance?.close();
};

<%}%>

export class HttpClient<SecurityDataType = unknown> {
    public instance: AxiosInstance;
    private securityData: SecurityDataType | null = null;
    private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
    private secure?: boolean;
    private format?: ResponseType;

    constructor({ securityWorker, secure, format, ...axiosConfig }: ApiConfig<SecurityDataType> = {}) {
      <% if(config.requireSelfAxios) { %>
        this.instance = selfAxios;
        <% } else { %>
          this.instance = axios.create({ ...axiosConfig, baseURL: axiosConfig.baseURL || "/" });
        <% } %>
        this.secure = secure;
        this.format = format;
        this.securityWorker = securityWorker;
        <% if(!config.requireSelfAxios) { %>
        // 增加请求拦截器
    this.instance.interceptors.request.use(
      (config) => {
        const { loading = true } = config as CustomAxiosRequestConfig;
        if (loading) addLoading();
        return config
      },
      (error) => Promise.reject(error)
    );

    // 增加响应拦截器
    this.instance.interceptors.response.use(
      (response) => {
        const { data } = response;
        const { loading = true } = response.config as CustomAxiosRequestConfig;
        if (loading) cancelLoading();
        
        // 存在业务异常 统一toast
        if (data.code !== BusinessCode.SUCCESS && data.code !== 0) {
          const message = data.msg || data.message || "";
          if (data.code === BusinessCode.TOKEN_INVALID && data.data) {
            // 未登录状态，此处可添加跳转登录逻辑
          } else {
            // toast提示错误信息
          }
          return Promise.reject(message);
        }
        // 返回数据
        return response;
      },
      (error) => {
        if (error && error.response) {
          const { status } = error.response;
          console.warn(
            `http error: status-${status} message-${codeMessage[status]}`
          );
          if (status === 403) {
            localStorage.clear();
            return;
          }

          if (codeMessage[status] !== null || undefined) {
            // Message.error(
            //   `接口：${error.response.data.path}，${error.response.data.message}`
            // );
            // 此处toast提示错误信息
          }
        }
        return Promise.reject(error);
      }
    );
    <% } %>
    }

    // 合并请求参数
    protected mergeRequestParams(params1: AxiosRequestConfig, params2?: AxiosRequestConfig): AxiosRequestConfig {
      const method = params1.method || (params2 && params2.method)

      return {
        ...this.instance.defaults,
        ...params1,
        ...(params2 || {}),
        headers: {
          ...((method && this.instance.defaults.headers[method.toLowerCase() as keyof HeadersDefaults]) || {}),
          ...(params1.headers || {}),
          ...((params2 && params2.headers) || {}),
        },
      };
    }

    // formdata 字符串化数据
    protected stringifyFormItem(formItem: unknown) {
      if (typeof formItem === "object" && formItem !== null) {
        return JSON.stringify(formItem);
      } else {
        return `${formItem}`;
      }
    }

    // 当请求方式为multipart/form-data的时候，new FormData() 创建数据
    protected createFormData(input: Record<string, unknown>): FormData {
      return Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        const propertyContent: any[] = (property instanceof Array) ? property : [property]

        for (const formItem of propertyContent) {
          const isFileType = formItem instanceof Blob || formItem instanceof File;
          formData.append(
            key,
            isFileType ? formItem : this.stringifyFormItem(formItem)
            );
        }

        return formData;
      }, new FormData());
    }

    // 封装的请求方法
    public request = async <T = any, _E = any>({
        secure,
        path,
        type,
        query,
        format,
        body,
        ...params
<% if (config.unwrapResponseData) { %>
    }: FullRequestParams): Promise<T> => {
<% } else { %>
    }: FullRequestParams): Promise<AxiosResponse<T>> => {
<% } %>
        const secureParams = ((typeof secure === 'boolean' ? secure : this.secure) && this.securityWorker && (await this.securityWorker(this.securityData))) || {};
        const requestParams = this.mergeRequestParams(params, secureParams);
        const responseFormat = (format || this.format) || undefined;

        // 如果contenttype === multipart/form-data, 参数处理
        if (type === ContentType.FormData && body && body !== null && typeof body === "object") {
          body = this.createFormData(body as Record<string, unknown>);
        }

        // 如果contenttype === text/plain, 参数处理
        if (type === ContentType.Text && body && body !== null && typeof body !== "string") {
          body = JSON.stringify(body);
        }

        return this.instance.request({
            ...requestParams,
            headers: {
                ...(requestParams.headers || {}),
                ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
            },
            params: query,
            responseType: responseFormat,
            data: body,
            url: path,
<% if (config.unwrapResponseData) { %>
        }).then(response => response.data);
<% } else { %>
        });
<% } %>
    };
}
